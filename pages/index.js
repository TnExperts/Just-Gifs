/* eslint-disable @next/next/no-img-element */
import Head from 'next/head';
import Image from 'next/image';
import styles from '../styles/Home.module.css';
import Footer from './components/footer.js';
import Header from './components/header.js';
import Description from './components/description';
import RustSVG from './components/rust-svg';
import Main from './components/main';
import { useEffect, useState } from 'react';

const TEST_GIFs = [
  'https://media.giphy.com/media/IwAZ6dvvvaTtdI8SD5/giphy.gif',
  'https://media.giphy.com/media/EkO6UqwhwcKFqEYXQO/giphy.gif',
  'https://media.giphy.com/media/qOhzfrkMzQO8U/giphy.gif',
  'https://media.giphy.com/media/n71ex8ztZnhao/giphy.gif',
  'https://media.giphy.com/media/7hY945na01sbV4yqgR/giphy.gif',
  'https://media.giphy.com/media/SXZyXeDrorHKJ5vvWY/giphy.gif',
  'https://media.giphy.com/media/e7Fwo2ddFgjf8XsI0N/giphy.gif',
  'https://media.giphy.com/media/CuKEZdZ3V01gI/giphy.gif',
  'https://media.giphy.com/media/l46Cgctdy5C23iB0c/giphy.gif',
  'https://media.giphy.com/media/l3HBbltOYjoNq/giphy.gif',
  'https://media4.giphy.com/media/AeFmQjHMtEySooOc8K/giphy.gif?cid=ecf05e47qdzhdma2y3ugn32lkgi972z9mpfzocjj6z1ro4ec&rid=giphy.gif&ct=g',
  'https://media.giphy.com/media/bC9czlgCMtw4cj8RgH/giphy.gif',
];

export default function Home() {
  // State
  const [walletAddress, setWalletAddress] = useState('');
  const [inputVal, setInputVal] = useState('');
  const [gifList, setGifList] = useState([]);

  // check if wallet is available
  const checkIfWalletIsAvailable = async () => {
    try {
      const { solana } = window;
      if (solana) {
        if (solana.isPhantom) {
          console.log('Wallet is available');
          // connecting to user wallet with solana.connect
          const res = await solana.connect({ onlyIfTrusted: true });
          //set the user wallet address
          setWalletAddress(res.publicKey.toString());
        }
      } else {
        alert('Get a Phantom Wallet');
      }
    } catch (error) {
      console.log(error);
    }
  };

  const connectWallet = async () => {
    try {
      const { solana } = window;
      if (solana) {
        const res = await solana.connect();
        setWalletAddress(res.publicKey.toString());
      }
    } catch (error) {
      console.log(error);
    }
  };

  const onInputChange = (e) => {
    const { value } = e.target;
    setInputVal(value);
  };

  const sendGif = async () => {
    if (inputVal.length > 0) {
      console.log('Gif Link: ', inputVal);
    } else {
      console.log('Empty Input. Try again');
    }
  };

  const NotConnectedButton = () => (
    <button
      className={[styles.cta_button, styles.connect_wallet_button].join(' ')}
      onClick={connectWallet}
    >
      Connect to Wallet
    </button>
  );

  const renderGIFContainer = () => (
    <div className={styles.connected_container}>
      <form
        className={styles.form_elem}
        onSubmit={(event) => {
          event.preventDefault();
          sendGif();
        }}
      >
        <input
          type="text"
          placeholder="Enter gif link!"
          value={inputVal}
          onChange={onInputChange}
        />
        <button
          type="submit"
          className={[styles.cta_button, styles.submit_gif_button].join(' ')}
        >
          Submit
        </button>
      </form>
      <div className={styles.box}>
        {gifList.map((gif) => (
          <div className={styles.gif_item} key={gif}>
            <img src={gif} alt={gif} />
          </div>
        ))}
      </div>
    </div>
  );

  // when the page loads, check if wallet is available
  useEffect(() => {
    const onLoad = async () => {
      await checkIfWalletIsAvailable();
    };
    window.addEventListener('load', onLoad);
    return () => window.removeEventListener('load', onLoad);
  }, []);

  useEffect(() => {
    if (walletAddress.length > 0) {
      console.log('Fetching Gif list...');
      // call solana program to get the gif list

      // set state
      setGifList(TEST_GIFs);
    }
  }, [walletAddress]);

  return (
    <div className={styles.container}>
      <Head>
        <title>Just GIFs</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Header />
      <Description />

      <main className={walletAddress ? styles.authed_container : styles.main}>
        {!walletAddress && NotConnectedButton()}
        <div className={styles.sub_text}>
          {walletAddress && renderGIFContainer()}
        </div>
      </main>

      <footer className={styles.footer}>
        <Footer />
      </footer>
    </div>
  );
}
